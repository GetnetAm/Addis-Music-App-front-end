
Addis Music app for addis software

This project is a simple CRUD (Create, Read, Update, Delete) music application built using React, Redux, and Redux-Saga. The application integrates with a backend API, utilizing JSONPlaceholder for data persistence, and is deployed on Netlify (frontend) and Render (backend). Table of Contents

Features
Technologies Used
Installation
Usage
Deployment
Challenges and Solutions
Contributing
License

Features

View Songs: Users can view a list of songs fetched from the backend API.
Add Songs: Users can add new songs to the list.
Edit Songs: Users can update the details of existing songs.
Delete Songs: Users can remove songs from the list.

Technologies Used Frontend

ReactJS: A JavaScript library for building user interfaces.
Redux Toolkit: A predictable state container for managing the application's state.
Redux-Saga: A middleware for handling side effects (e.g., asynchronous API calls).
Emotion and Styled System: For component-based styling in the application.

Backend

JSONPlaceholder: A free online REST API that I used to simulate the backend for this project.

Deployment

Netlify: Hosting platform used to deploy the frontend.
Render: Hosting platform used for the backend API.

Installation

Clone the repository:
git clone https://github.com/GetnetAm/Addis-Soft-Music-App.git

cd music-crud-app

Install dependencies:

bash

npm install

Start the development server:

bash

npm start

The app will run on http://localhost:3000.

Usage

Once the application is running:

View the list of songs: The home page displays a list of songs fetched from the JSONPlaceholder API.
Add a new song: Click on the "Add Song" button and fill in the details to add a new song.
Edit a song: Click on the "Edit" button next to a song, make your changes, and save them.
Delete a song: Click on the "Delete" button to remove a song from the list.

Deployment

The application is deployed and accessible online via the following links:

Frontend: Netlify Link
Backend: Render Link

Challenges and Solutions CORS Issues

When integrating the frontend and backend, I encountered Cross-Origin Resource Sharing (CORS) issues. This was resolved by ensuring that the necessary CORS headers were enabled on the backend API. API Limitations

Using JSONPlaceholder, which is a mock API, presented some limitations in terms of data persistence and functionality. Despite this, I was able to implement the full CRUD functionality by adapting the app to the available endpoints. Contributing

If you would like to contribute to this project, please fork the repository and submit a pull request with your changes. License

This project is licensed under the free you can download and use it is open source.

Feel free to adjust the content according to your specific implementation details. This README provides a comprehensive overview that will help others understand and use your project.